(define (save-data data filepath)
  (call-with-output-file filepath (lambda (p) (display data p))))
(define (load-data filepath)
  (call-with-input-file filepath (lambda (p)
                                   (define (_iter current-line result)
                                         (let ((data (read p)))
                                           (if (eof-object? data)
                                               result
                                           (_iter data (cons data result)))))
                                   (reverse (_iter p '())))))
(define (count-lines filepath)
  (define (read-words-from-port port)
    (define (is-trash? ch)
      (equal? ch #\newline))
    (define (is-char? ch)
      (not (is-trash? ch)))
    (define (_iter buffer result)
      (let ((ch (read-char port)))
        (if (eof-object? ch)
            (if (equal? (string-length buffer) 0)
                (reverse result)
                (reverse (cons buffer result)))
            (cond
              ((is-trash? ch) (if (equal? (string-length buffer) 0)
                                  (_iter buffer result)
                                  (_iter "" (cons buffer result))))
              ((is-char? ch) (_iter (string-append buffer (string ch)) result))))))
    (_iter "" '()))
      (length (call-with-input-file filepath (lambda (port) (read-words-from-port port)))))
                                   