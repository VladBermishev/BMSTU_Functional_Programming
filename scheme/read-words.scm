(define (read-words . filepath)
  (define (read-words-from-port port)
    (define (is-trash? ch)
      (or (equal? ch #\newline) (equal? ch #\space) (equal? ch #\return)))
    (define (is-char? ch)
      (not (is-trash? ch)))
    (define (_iter buffer result)
      (let ((ch (read-char port)))
        (if (eof-object? ch)
            (if (equal? (string-length buffer) 0)
                (reverse result)
                (reverse (cons buffer result)))
            (cond
              ((is-trash? ch) (if (equal? (string-length buffer) 0)
                                  (_iter buffer result)
                                  (_iter "" (cons buffer result))))
              ((is-char? ch) (_iter (string-append buffer (string ch)) result))))))
    (_iter "" '()))
  (if (null? filepath)
      (read-words-from-port (current-input-port))
      (call-with-input-file (car filepath) (lambda (port) (read-words-from-port port)))))
                                   