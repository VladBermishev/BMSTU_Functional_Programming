(define (subst expr substr)
  (define (_iter expr result)
    (if (null? expr)
        (reverse result)
        (if (list? (car expr))
            (_iter (cdr expr) (cons (_iter (car expr) '()) result))
            (let ((search-result (assq (car expr) substr)))
              (if (equal? search-result #f)
                  (_iter (cdr expr) (cons (car expr) result))
                  (_iter (cdr expr) (cons (cadr search-result) result)))))))
   (_iter expr '()))