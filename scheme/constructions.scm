(load "unit-test.scm")
(define-syntax when
  (syntax-rules ()
    ((when condition . expressions)
     (if condition (begin . expressions)))))
(define-syntax unless
  (syntax-rules ()
    ((unless condition . expressions)
     (if (not condition) (begin . expressions)))))
(display "when/unless tests:\n")
(define x 1)
(when   (> x 0) (display "x > 0")  (newline))
(unless   (= x 0) (display "x != 0")  (newline))
(define-syntax while
  (syntax-rules ()
    ((while condition expression ...)
     (let loop ()
       (when condition
         expression ...
         (loop))))))
(display "while test:\n")
(let ((p 0)
      (q 0))
  (while (< p 3)
         (set! q 0)
         (while (< q 3)
                (display (list p q))
                (newline)
                (set! q (+ q 1)))
         (set! p (+ p 1))))
(define-syntax for
  (syntax-rules (in as)
    ((for element in collectable expression ...)
     (for-each (lambda (element) expression ...) collectable))
    ((for collectable as element expression ...)
     (for element in collectable expression ...))))
(display "for test N1:\n")
(for '(1 2 3) as i
  (for '(4 5 6) as j
    (display (list i j))
    (newline)))
(display "for test N2:\n")
(for i in '(1 2 3)
  (for j in '(4 5 6)
    (display (list i j))
    (newline)))
(define-syntax repeat
  (syntax-rules (until)
    ((repeat (expression ...) until condition)
     (let loop ()
       (unless condition
         expression ...
         (loop))))))
(display "repeat-until test:\n")
(let ((i 0)
      (j 0))
  (repeat ((set! j 0)
           (repeat ((display (list i j))
                    (set! j (+ j 1)))
                   until (= j 3))
           (set! i (+ i 1))
           (newline))
          until (= i 3)))
(define-syntax cout
  (syntax-rules (<< endl)
    ((cout) ())
    ((cout << endl) (newline))
    ((cout << string) (display string))
    ((cout << endl . others) (begin (newline) (cout . others)))
    ((cout << string . others) (begin (display string) (cout . others)))))
(display "cout test:\n")
(cout << "a=" << 1 << endl << "b=" << 2 << endl)
